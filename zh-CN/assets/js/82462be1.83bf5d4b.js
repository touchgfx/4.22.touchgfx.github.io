"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[38361],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return g}});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,g=p["".concat(l,".").concat(h)]||p[h]||u[h]||r;return n?i.createElement(g,a(a({ref:t},m),{},{components:n})):i.createElement(g,a({ref:t},m))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},42102:function(e,t,n){var i=n(67294),o=n(85138);const r=i.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},i.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}));class a extends i.Component{render(){return i.createElement(o.Z,{color:"var(--highlight-color-caution)",header:"Caution",type:"caution",icon:r},this.props.children)}}t.Z=a},66105:function(e,t,n){var i=n(67294);class o extends i.Component{render(){return i.createElement("div",{className:"code-header"},i.createElement("div",null,i.createElement("h5",null,this.props.children)))}}t.Z=o},7044:function(e,t,n){var i=n(67294),o=n(70676);t.Z=function(e){const t=e.noShadow||!1,n=e.width,r=e.height,a=(0,o.Z)(e.imageSource);return t?i.createElement("div",{className:"figure noshadow"},i.createElement("a",{href:a,target:"_blank"},i.createElement("img",{width:n,height:r,src:a})),i.createElement("p",null,e.children)):i.createElement("div",{className:"figure"},i.createElement("a",{href:a,target:"_blank"},i.createElement("img",{width:n,height:r,src:a})),i.createElement("p",null,e.children))}},85138:function(e,t,n){var i=n(67294);class o extends i.Component{render(){const e=`highlight highlight-${this.props.type}`;return i.createElement("div",{className:e},i.createElement("div",{className:"highlight-heading"},i.createElement("h5",null,i.createElement("div",{className:"highlight-icon"},this.props.icon),this.props.header)),i.createElement("div",{className:"highlight-content"},this.props.children))}}t.Z=o},82648:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return h}});n(67294);var i=n(3905),o=n(42102),r=n(66105),a=n(7044);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},s.apply(this,arguments)}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const c={id:"image-compression",title:"Image Compression"},m=void 0,p={unversionedId:"development/ui-development/touchgfx-engine-features/image-compression",id:"development/ui-development/touchgfx-engine-features/image-compression",title:"Image Compression",description:"TouchGFX supports image compression starting from version 4.22. The support in 4.22 is limited to compression of L8 images.",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/development/ui-development/touchgfx-engine-features/image-compression.mdx",sourceDirName:"development/ui-development/touchgfx-engine-features",slug:"/development/ui-development/touchgfx-engine-features/image-compression",permalink:"/4.22/zh-CN/docs/development/ui-development/touchgfx-engine-features/image-compression",draft:!1,tags:[],version:"current",frontMatter:{id:"image-compression",title:"Image Compression"},sidebar:"docs",previous:{title:"SVG",permalink:"/4.22/zh-CN/docs/development/ui-development/touchgfx-engine-features/svg"},next:{title:"UI Components",permalink:"/4.22/zh-CN/docs/category/ui-components"}},u={},h=[{value:"L8 Compression",id:"l8-compression",level:2},{value:"3 algorithms",id:"3-algorithms",level:3},{value:"Working with compressed images",id:"working-with-compressed-images",level:2},{value:"Compression level",id:"compression-level",level:3},{value:"Decompressing images to the bitmap cache",id:"decompressing-images-to-the-bitmap-cache",level:2},{value:"Limitations",id:"limitations",level:2}],g={toc:h},d="wrapper";function f(e){var{components:t}=e,n=l(e,["components"]);return(0,i.kt)(d,s({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"TouchGFX supports image compression starting from version 4.22. The support in 4.22 is limited to compression of L8 images."),(0,i.kt)("p",null,"Image compression is the process of reducing the storage requirements for an image. The reduced size of the images in a project can result in cost reductions if a smaller flash is used. The reduction can also mean that more images can be used in the project resulting in a richer UI."),(0,i.kt)("p",null,"Image compression generally comes in two flavors: Lossless or lossy. Lossy image compression works by removing minor details of the image. This often gives the biggest reduction but the original image cannot be reproduced exactly. Lossless compression always reproduces the original image without any differences. Lossless compression gives in general a lower size reduction."),(0,i.kt)("p",null,"For graphics it is often required that UI elements are drawn exactly as they were designed. For this reason TouchGFX only supports lossless compression."),(0,i.kt)("p",null,"The advantage of image compression is the size reduction, but there is also a disadvantage, as the image must be decompressed when it is drawn to the frame buffer. This decompression requires in many situations more work from the CPU compared to drawing an uncompressed image. A performance reduction is possibly the outcome."),(0,i.kt)("p",null,"This means that the advantage gained from the flash reduction must be compared to the disadvantage from the increased CPU usage."),(0,i.kt)("p",null,"Be aware that the graphics accelerators DMA2D and GPU2D present in many STM32 micro controllers cannot draw a compressed image directly. Compressed images are always drawn using software rendering."),(0,i.kt)("p",null,"In many applications is it not recommended to compress all images, but only those where the performance is not hurt and the flash reduction is relevant."),(0,i.kt)("h2",s({},{id:"l8-compression"}),"L8 Compression"),(0,i.kt)("p",null,"As mentioned above TouchGFX 4.22 supports compression of L8-images. Recall that the L8 bitmap formats are suitable only for images with up to 256 colors. Each pixel is just an 8-bit number that refers to a color in a color table stored with the image. The compression of an L8 is only compressing the pixel numbers. The color table is left untouched."),(0,i.kt)("p",null,"As an example consider the image below. It is used as a background in a metering application."),(0,i.kt)(a.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/gauge.png",mdxType:"Figure"},"L8-ARGB8888"),(0,i.kt)("p",null,"The image is 184 x 184 pixels. The size of the pixel data is thus 184 x 184 = 33.856 bytes."),(0,i.kt)("p",null,"If we compress the image the pixel data is reduced to 5.735 bytes. The total size of the image data, including the color table, is less than 20% of the original image. Compression thus allows us to have 5 different backgrounds in the same flash space, or to reduce the flash requirements by 28.121 bytes."),(0,i.kt)("p",null,"A compressed L8 image is used like an ordinary uncompressed bitmap. You can for example show the image using the Image widget without any modification to the project in the TouchGFX Designer or in code. This makes use of compressed images very easy."),(0,i.kt)("p",null,"There are a few limitations. Compressed images cannot be used with Widgets that scales or rotates the image or with the Canvas widgets. See the list ",(0,i.kt)("a",s({parentName:"p"},{href:"#limitations"}),"below"),"."),(0,i.kt)(o.Z,{mdxType:"Caution"},"Compressed images can not be used with all Widgets. The Designer gives you a warning icon."),(0,i.kt)(a.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/scalableimage.png",mdxType:"Figure"},"Using a compressed image for with an incompatible Widget."),(0,i.kt)("h3",s({},{id:"3-algorithms"}),"3 algorithms"),(0,i.kt)("p",null,"TouchGFX uses 3 different compression algorithm. The image converter selects the algorithm that gives the best compression, unless the user has mandated a specific algorithm in the configuration. The algorithms are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"L4, encode each pixel in 4 bits. Only works for images with up to 16 colors."),(0,i.kt)("li",{parentName:"ul"},"RLE, run-length encoding of the pixels. Only works for images with up to 64 colors."),(0,i.kt)("li",{parentName:"ul"},"LZW9, dictionary based encoding. Works for all L8 images.")),(0,i.kt)("p",null,"The RLE algorithm decompresses much faster than LZW9, so the image converter will select RLE if LZW9 is only compressing the image marginally better."),(0,i.kt)("h2",s({},{id:"working-with-compressed-images"}),"Working with compressed images"),(0,i.kt)("p",null,"Compressed images are used just like the ordinary images. You either configure widgets to use the bitmaps in the TouchGFX Designer, or you assign the Bitmaps in code."),(0,i.kt)(a.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/image-configuration.png",mdxType:"Figure"},"Configuring compression for an L8-ARGB8888 image"),(0,i.kt)("p",null,'The only configuration required is to set the Compression value to "Auto". The Image Converter will then automatically select the most suitable compression or none if the image is not compressible.'),(0,i.kt)(a.Z,{imageSource:"/img/development/ui-development/touchgfx-engine-features/image-compression/selecting-gauge-image.png",mdxType:"Figure"},"Selecting a compressed image for a Widget"),(0,i.kt)("p",null,"Now we can select the image for a Widget as normal. There is no difference here compared to an uncompressed image."),(0,i.kt)("p",null,"There is also no difference when working with the images in code. The compressed bitmaps are referenced using their BitmapID as usual:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),"    image1.setXY(148, 148);\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));\n")),(0,i.kt)("p",null,"Read more about compressed L8-images ",(0,i.kt)("a",s({parentName:"p"},{href:"../../ui-development/scenarios/using-the-l8-image-format-to-reduce-memory-consumption#l8-image-compression"}),"here")),(0,i.kt)("h3",s({},{id:"compression-level"}),"Compression level"),(0,i.kt)("p",null,"The compression algorithm selected by the Image Converter is written in the generated files. Here we can also find the compression level."),(0,i.kt)("p",null,"The image we used above is generated into the file ",(0,i.kt)("inlineCode",{parentName:"p"},"generated/images/src/image_gauge_background.cpp"),". The header of this file reads:"),(0,i.kt)(r.Z,{mdxType:"CodeHeader"},"image_gauge_background.cpp (extract)"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),'// 4.22 D0 AN R0 FL8_ARGB8888 U888 N0 SExtFlashSection EExtFlashSection CL8_LZW9\n\nLOCATION_PRAGMA("ExtFlashSection")\nKEEP extern const unsigned char image_gauge_background[] LOCATION_ATTRIBUTE("ExtFlashSection") = {\n  // 184x184 L8_ARGB8888 pixels. Compression [output/input x 100]: 5735/33856 x 100 = 16.9%\n  0x00, 0x26, 0x50, 0xa8, 0x60, 0xe1, 0x02, 0x86, 0x0c, 0x1a, 0x36, 0x70,\n  ....\n')),(0,i.kt)("p",null,"The end of the comment in the first line shows the compression level. Here we see that the Image Converter has selected the LZW9 algorithm. The end of line 5 shows that we have now 5735 bytes of pixel data whereas the original was 33856 bytes. Resulting in a compression to 16.9% (not counting the color table)."),(0,i.kt)("h2",s({},{id:"decompressing-images-to-the-bitmap-cache"}),"Decompressing images to the bitmap cache"),(0,i.kt)("p",null,"Drawing compressed images performs in most cases worse than drawing uncompressed images. Further more, as mentioned in the introduction, the graphics accelerators in STM32 micro-controllers (DMA2D and GPU2D) cannot draw the compressed images. Therefore, compressed images are always drawn by software resulting in lower performance and higher cpu-load."),(0,i.kt)("p",null,"For these reasons TouchGFX also contains functionality to decompress a compressed image into the bitmap cache in RAM at runtime."),(0,i.kt)("p",null,"When the image is decompressed to RAM the drawing performance is similar to using uncompressed images and the accelerators can draw the image."),(0,i.kt)("p",null,"To be able to decompress we need first to setup the bitmap cache. Read more about using the bitmap cache ",(0,i.kt)("a",s({parentName:"p"},{href:"caching-bitmaps#bitmap-cache-configuration"}),"here"),"."),(0,i.kt)("p",null,"After setting up the bitmap cache, we can decompress the image using the function ",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::decompress"),". The full code is shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",s({parentName:"pre"},{className:"language-cpp"}),"// Define an array for the bitmap cache\nuint16_t cache[20*1024]; //40 KB cache\n// Define an array for the decompression temporary buffer\nuint16_t lzwBuffer[1024];\n\nvoid TemplateView::setupScreen()\n{\n    ...\n    Bitmap::setCache(cache, sizeof(cache));\n    bool r = Bitmap::decompress(BITMAP_GAUGE_BACKGROUND_ID, lzwBuffer);\n    image1.setXY(148, 148);\n    image1.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE_BACKGROUND_ID));\n}\n")),(0,i.kt)("p",null,"The bitmap cache must big enough the hold uncompressed image. Our image is 184 x 184 pixels plus the color table holding 207 ARGB8888 colors. The total size is therefore 34.688 bytes."),(0,i.kt)("p",null,"A 2048 bytes buffer is used by the decompresser during the decompression of an LZW9 compressed image (for building a dictionary). The buffer is not required after the decompression and can be reused for other purposes. The buffer is not required for decompression of RLE and L4 compressed images."),(0,i.kt)("p",null,"When the decompressed image is not used anymore, it can be removed from the bitmap cache using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Bitmap::cacheRemoveBitmap")," method."),(0,i.kt)("h2",s({},{id:"limitations"}),"Limitations"),(0,i.kt)("p",null,"A compressed image can not be used with the Widgets that scales or rotates the image, or the Widgets that fills an area. These limitations are made for performance reasons. The TouchGFX Designer will not allow you to select a compressed image."),(0,i.kt)("p",null,"If you want to use a specific L8 image with these Widgets we suggest to not enable compression for the image. Alternatively you can decompress the image at runtime."),(0,i.kt)("p",null,"The Widgets that does not support compressed images are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ScalableImage"),(0,i.kt)("li",{parentName:"ul"},"Gauge for the needle and arc"),(0,i.kt)("li",{parentName:"ul"},"Static- and DynamicGraph for filling the area below the graph"),(0,i.kt)("li",{parentName:"ul"},"AnalogClock for the hands"),(0,i.kt)("li",{parentName:"ul"},"Circle, Line and Shape"),(0,i.kt)("li",{parentName:"ul"},"Circle- and LineProgress")))}f.isMDXComponent=!0}}]);